user root;
worker_processes 10;
events {
    worker_connections 1024;
}

#error_log logs/error.log debug;
error_log /dev/stderr debug;

env X509_VOMS_DIR=/vomsdir;
env X509_CERT_DIR=/etc/grid-security/certificates;

thread_pool default threads=32 max_queue=65536;

http {
    log_format bodylog '$remote_addr - $remote_user [$time_local] \n'
      '"$request" $status $body_bytes_sent \n'
      '"$ssl_client_i_dn"\n'
      '"$ssl_client_s_dn"\n'
      '"$voms_user"\n'
      '"$voms_user_ca"\n'
      '"$voms_fqans"\n'
      '"$voms_server"\n'
      '"$voms_server_ca"\n'
      '"$voms_vo"\n'
      '"$voms_server_uri"\n'
      '"$voms_not_before"\n'
      '"$voms_not_after"\n'
      '"$voms_generic_attributes"\n'
      '"$voms_serial"\n'
      '"$http_referer" "$http_user_agent" $request_time"\n'
      '"$proxy_host"\n'
      '$upstream_cache_status [$time_local]\n'
      ;

    include mime.types;
    default_type application/octet-stream;

    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=local:10m max_size=10G use_temp_path=on inactive=30m;

    add_header X-Proxy-Cache $upstream_cache_status;
    add_header X-Handled-By $proxy_host;

    lua_package_path '~/lua/?.lua;;';
    lua_ssl_verify_depth 100;
    lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;
    lua_shared_dict introspection 10m;


    server {
        set $resp_body "";
        body_filter_by_lua '
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
        end
        ';

        #access_log logs/access.log bodylog;
        access_log /dev/stdout bodylog;
        listen 13443 ssl;
        server_name ;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate /hostcert/hostcert.pem;
        ssl_certificate_key /hostcert/hostkey.pem;
        ssl_client_certificate /etc/pki/tls/certs/ca-bundle.crt;
        ssl_verify_client optional;
        ssl_verify_depth 100;
        ssl_session_cache shared:SSL:60m;
        ssl_session_timeout 60m;

        resolver 127.0.0.11 127.0.0.1;

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to proxy
            try_files $uri $uri/ @proxy;
        }
            location @proxy {
              
              aio threads=default;
              directio 16M;
              output_buffers 2 1M;

              sendfile on;
              sendfile_max_chunk 4m;
              
              tcp_nodelay on;
              tcp_nopush on;
       
	      keepalive_timeout 65;
	      client_max_body_size        1024m;
	      client_body_buffer_size     4m;
	      proxy_http_version 1.1;
	      proxy_set_header Connection "";

              proxy_cache_key "$scheme$request_method$host$request_uri";
	      proxy_buffering on;
              proxy_buffers   128 4m;
              proxy_buffer_size 4m;     

              proxy_max_temp_file_size 0;
              proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
              proxy_cache_valid 200 302 30m;
              proxy_cache_valid any 30m;
              
              set $proxy '';

              access_by_lua_block {

                  local function notAuthorized()
                    ngx.status = 401
                    ngx.header.content_type = 'application/json'
                    ngx.print('{"error":"VO not recognized or not authorized"}')
                    ngx.exit(401)
                  end

                  local opts = {
                    discovery = "https:///.well-known/openid-configuration",
                    token_signing_alg_values_expected = {"RS256"},
                    accept_none_alg = false,
                    accept_unsupported_alg = false,
                    jwk_expires_in = 24 * 60 * 60
                  }

                  local res, err = require("resty.openidc").bearer_jwt_verify(opts)

                  if ngx.var.voms_vo == "indigo-dc" then
                      ngx.var.proxy = ':11443';
                  elseif (string.find(ngx.req.get_headers()["authorization"]:lower(), "bearer", nil, true)) then
                    if err or not res then
                      ngx.status = 403
                      ngx.say(err and err or "no access_token provided")
                      ngx.exit(ngx.HTTP_FORBIDDEN)
                    else
                      ngx.var.proxy = ':11443';
                    end
                  else
                    return notAuthorized();
                  end

              }

              proxy_pass https://$proxy;
              proxy_cache local;

              proxy_ssl_verify on;
              proxy_ssl_verify_depth 5;
              proxy_ssl_certificate /hostcert/hostcert.pem;
              proxy_ssl_certificate_key /hostcert/hostkey.pem;
              proxy_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;

       }
   }
}
