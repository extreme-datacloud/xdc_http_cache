user root;
worker_processes 10;
events {
    worker_connections 1024;
}

#error_log logs/error.log debug;
error_log /dev/stderr debug;

env X509_VOMS_DIR=/vomsdir;
env X509_CERT_DIR=/etc/grid-security/certificates;

http {
    log_format bodylog '$remote_addr - $remote_user [$time_local] \n'
      'REQUEST "$request" $status $body_bytes_sent \n'
      'CLIENT DN:  "$ssl_client_i_dn"\n'
      'CLIENT PROXY DN: "$ssl_client_s_dn"\n'
      'VOMS USER: "$voms_user"\n'
      'VOMS USER CA: "$voms_user_ca"\n'
      'VOMS FQANS: "$voms_fqans"\n'
      'VOMS SERVER: "$voms_server"\n'
      'VOMS SERVER CA: "$voms_server_ca"\n'
      'VOMS VO: "$voms_vo"\n'
      'VOMS SERVER URI: "$voms_server_uri"\n'
      'VOMS NOT BEFORE: "$voms_not_before"\n'
      'VOMS NOT AFTER: "$voms_not_after"\n'
      'VOMS GENERIC ATTRIBUTES: "$voms_generic_attributes"\n'
      'VOMS SERIAL: "$voms_serial"\n'
      '"$http_referer" "$http_user_agent" $request_time"\n'
      '<"$request_body" >"$resp_body"\n'
      'PROXY HOST: "$proxy_host"\n'
      'CLIENT HOST: "$host"\n'
      'HTTP x FORWARDED FOR:  $http_x_forwarded_for\n'
      '$upstream_cache_status [$time_local]\n'
      ;

    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=local:10m max_size=700m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_buffering on;
    proxy_max_temp_file_size 0;
    proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
    proxy_cache_valid 200 302 60h;
    proxy_cache_valid any 60m;
    add_header X-Proxy-Cache $upstream_cache_status;
    add_header X-Handled-By $proxy_host;

    lua_package_path '~/lua/?.lua;;';
    lua_ssl_verify_depth 100;
    lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;
    lua_shared_dict introspection 10m;


    server {
        set $resp_body "";
        body_filter_by_lua '
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
        end
        ';

        #access_log logs/access.log bodylog;
        access_log /dev/stdout bodylog;
        listen 13443 ssl;
        server_name ds-507.cr.cnaf.infn.infn.it;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate /digicert/ds-507.cr.cnaf.infn.it.pem;
        ssl_certificate_key /digicert/ds-507.cr.cnaf.infn.it.key;
        ssl_client_certificate /etc/pki/tls/certs/ca-bundle.crt;
        ssl_verify_client optional;
        ssl_verify_depth 100;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        resolver 131.154.1.3;

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to proxy
            try_files $uri $uri/ @proxy;
        }
            location @proxy {

              sendfile  on;
              set $proxy '';

              access_by_lua_block {

                  local function notAuthorized()
                    ngx.status = 401
                    ngx.header.content_type = 'application/json'
                    ngx.print('{"error":"VO not recognized or not authorized"}')
                    ngx.exit(401)
                  end

                  local opts = {
                    discovery = "https://cloud-vm159.cloud.cnaf.infn.it/.well-known/openid-configuration",
                    token_signing_alg_values_expected = {"RS256"},
                    accept_none_alg = false,
                    accept_unsupported_alg = false,
                    jwk_expires_in = 24 * 60 * 60
                  }

                  local res, err = require("resty.openidc").bearer_jwt_verify(opts)

                  if ngx.var.voms_vo == "indigo-dc" then
                    ngx.var.proxy = 'ds-507.cr.cnaf.infn.it:11443';
                  elseif (string.find(ngx.req.get_headers()["user-agent"]:lower(), "curl", nil, true)) then
                      ngx.var.proxy = 'ds-507.cr.cnaf.infn.it:11443';
                  elseif (string.find(ngx.req.get_headers()["authorization"]:lower(), "bearer", nil, true)) then
                     if err or not res then
                       ngx.status = 403
                       ngx.say(err and err or "no access_token provided")
                       ngx.exit(ngx.HTTP_FORBIDDEN)
                     else
                       ngx.var.proxy = 'ds-507.cr.cnaf.infn.it:11443';
                     end
                  else
                     return notAuthorized();
                  end

              }

              proxy_pass https://$proxy;
              proxy_cache local;

              proxy_ssl_verify on;
              proxy_ssl_verify_depth 5;
              #proxy_ssl_certificate /digicert/cloud-vm159_cloud_cnaf_infn_it.crt;
              #proxy_ssl_certificate_key /digicert/cloud-vm159_cloud_cnaf_infn_it.key;
              proxy_ssl_certificate /digicert/ds-507.cr.cnaf.infn.it.pem;
              proxy_ssl_certificate_key /digicert/ds-507.cr.cnaf.infn.it.key;
              proxy_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;

       }
   }
}
